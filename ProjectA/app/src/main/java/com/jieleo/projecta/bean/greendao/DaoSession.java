package com.jieleo.projecta.bean.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.jieleo.projecta.bean.greendao.Collect;
import com.jieleo.projecta.bean.greendao.Collection;
import com.jieleo.projecta.bean.greendao.CollectSingle;
import com.jieleo.projecta.bean.greendao.User;

import com.jieleo.projecta.bean.greendao.CollectDao;
import com.jieleo.projecta.bean.greendao.CollectionDao;
import com.jieleo.projecta.bean.greendao.CollectSingleDao;
import com.jieleo.projecta.bean.greendao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig collectDaoConfig;
    private final DaoConfig collectionDaoConfig;
    private final DaoConfig collectSingleDaoConfig;
    private final DaoConfig userDaoConfig;

    private final CollectDao collectDao;
    private final CollectionDao collectionDao;
    private final CollectSingleDao collectSingleDao;
    private final UserDao userDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        collectDaoConfig = daoConfigMap.get(CollectDao.class).clone();
        collectDaoConfig.initIdentityScope(type);

        collectionDaoConfig = daoConfigMap.get(CollectionDao.class).clone();
        collectionDaoConfig.initIdentityScope(type);

        collectSingleDaoConfig = daoConfigMap.get(CollectSingleDao.class).clone();
        collectSingleDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        collectDao = new CollectDao(collectDaoConfig, this);
        collectionDao = new CollectionDao(collectionDaoConfig, this);
        collectSingleDao = new CollectSingleDao(collectSingleDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);

        registerDao(Collect.class, collectDao);
        registerDao(Collection.class, collectionDao);
        registerDao(CollectSingle.class, collectSingleDao);
        registerDao(User.class, userDao);
    }
    
    public void clear() {
        collectDaoConfig.clearIdentityScope();
        collectionDaoConfig.clearIdentityScope();
        collectSingleDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
    }

    public CollectDao getCollectDao() {
        return collectDao;
    }

    public CollectionDao getCollectionDao() {
        return collectionDao;
    }

    public CollectSingleDao getCollectSingleDao() {
        return collectSingleDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

}
